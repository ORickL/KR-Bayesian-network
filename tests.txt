# test random network generator 
'''
#checking whether the function creates satisfactory DAGs
acyclic = create_acyclic_digraph_network_of_size_N(5, 0.5) # 7 nodes and 0.5 probability of making edges between nodes
#nx.draw(acyclic, with_labels = True)
#plt.show()

#checking whether the get_parents functions work properly, also check the data types
number_of_parents = get_number_of_parents_random_network(acyclic)
print(number_of_parents)
which_parents = get_which_parents_random_network(acyclic)
print(which_parents)

#This code takes which_parents which is data as [(int, []), (int, [])] etc and return [[0], [0, 1], [0, 2]] which means node 0 has no parents, node 1 has 0 as a parent and node 2 has 0 has a parent
all_columns = []
for i in range(len(which_parents)):
    node_i_column = []
    node_i = which_parents[i]
    parents_of_node_i = node_i[1]
    for element in parents_of_node_i:
        node_i_column.append(element) # first append the data in the second element of the tuple
    node_i_column.append(node_i[0])
    all_columns.append(node_i_column) # then append the data in the second element of the tuple (the node itself)
print(all_columns) 

number_of_rows = [2 ** len(c) for c in all_columns] # make the  number of rows for the pandas dataframe (2^number of columns)
print(number_of_rows)

df = pd.DataFrame(index= np.arange(number_of_rows[4]), columns=all_columns[4]) # can change 4 to the variable you want to check, creates df for that var
print(df)

# checking whether the function creates satisfactory DAGs
acyclic = create_acyclic_digraph_network_of_size_N(7, 0.5) # 7 nodes and 0.5 probability of making edges between nodes
nx.draw(acyclic, with_labels = True)
plt.show()

# checking whether the get_parents functions work properly, also check the data types
number_of_parents = get_number_of_parents_random_network(acyclic)
print(number_of_parents)
which_parents = get_which_parents_random_network(acyclic)
print(which_parents)

# made a start with getting the correct number of rows based on the variable and correct column order
This might not be necessary if you can get the parents data in the right structure
var_3 = which_parents[3]
cols = var_3[1]
cols.append(var_3[0])
rows = 2 ** (len(cols))

#playing around with making truth tables for the dataframe.
truth_values_1 = []
for j in range(int(rows / 2)):
    truth_values_1.append(True)
for k in range(int(rows/2)):
    truth_values_1.append(False)
print(truth_values_1)

#Printing the dataframe to check if the dimensions and columns are correct.
df = pd.DataFrame(index = np.arange(rows), columns = cols)
print(df)
'''

# test maxing out
'''
bn_grass = BNReasoner('testing/lecture_example.BIFXML')
example_cpt = bn_grass.bn.get_cpt('Wet Grass?')
print(example_cpt)
bn_grass.maxing_out(example_cpt, ['Wet Grass?'])
'''

# test summing out
'''
bn_grass = BNReasoner('testing/lecture_example.BIFXML')
example_cpt = bn_grass.bn.get_cpt('Wet Grass?')
print(example_cpt)
bn_grass.summing_out(example_cpt, ['Wet Grass?'])
'''

# test JPD^maxing-out
'''
bn_grass = BNReasoner('testing/lecture_example.BIFXML')
print(bn_grass.maxing_out(('Sprinkler?', 'Rain?')))
'''

# test JPD^summing-out
'''
bn_grass = BNReasoner('testing/lecture_example.BIFXML')
print(bn_grass.summing_out(('Slippery Road?', 'Sprinkler?', 'Rain?')))
'''

# test get JPD
'''
bn_grass = BNReasoner('testing/lecture_example.BIFXML')
print(bn_grass.get_joint_probability_distribution())
print(bn_grass.get_joint_probability_distribution().sum())
'''

# test 2 multiplying factors
'''
BN = BayesNet()
BN.load_from_bifxml('testing/lecture_example.BIFXML')
BR = BNReasoner(BN)
cpt_1, cpt_2 = BN.get_cpt('Winter?'), BN.get_cpt('Sprinkler?')
print(BR.multiply_cpts(cpt_1, cpt_2))
'''

# test multiplying factors
'''
BN = BNReasoner('testing/dog_problem.BIFXML')
cpt_1 = BN.bn.get_cpt("hear-bark")
cpt_2 = BN.bn.get_cpt("dog-out")
print('cpt_1:', cpt_1, 'cpt_2:', cpt_2)
factor_product = BN.multiply_cpts(cpt_1, cpt_2)
print('factor_product:', factor_product)
'''

# test d-separation
'''
reasoner = BNReasoner('testing/dog_problem.BIFXML')
BN = BayesNet()
network = BN.load_from_bifxml('testing/dog_problem.BIFXML')
BN.draw_structure()
test = reasoner.d_separation(network, 'family-out', 'hear-bark', ['dog-out'])
print(test)

# test = reasoner.d_separation(network, 'dog-out', 'light-on', ['dog-out'])
# print(test)
'''
if __name__ == "__main__":
    # test pruner
    '''
    bn_grass = BNReasoner('testing/lecture_example.BIFXML')
    bn_grass.bn.draw_structure()
    pruned_bn_grass = bn_grass.pruner({'Winter?', 'Wet Grass?'},{'Sprinkler?'})
    pruned_bn_grass.bn.draw_structure()
    '''

    # test maxing-out
    '''
    bn_grass = BNReasoner('testing/lecture_example.BIFXML')
    print(bn_grass.maxing_out(('Sprinkler?', 'Rain?')))
    '''

    # test summing-out
    '''
    bn_grass = BNReasoner('testing/lecture_example.BIFXML')
    print(bn_grass.summing_out(('Slippery Road?', 'Sprinkler?', 'Rain?')))
    '''

    # test get JPD
    '''
    bn_grass = BNReasoner('testing/lecture_example.BIFXML')
    print(bn_grass.get_joint_probability_distribution())
    print(bn_grass.get_joint_probability_distribution().sum())
    '''

    # test 2 multiplying factors
    '''
    BN = BayesNet()
    BN.load_from_bifxml('testing/lecture_example.BIFXML')
    BR = BNReasoner(BN)
    cpt_1, cpt_2 = BN.get_cpt('Winter?'), BN.get_cpt('Sprinkler?')
    print(BR.multiply_cpts(cpt_1, cpt_2))
    '''

    # test multiplying factors
    '''
    BN = BNReasoner('testing/dog_problem.BIFXML')
    cpt_1 = BN.bn.get_cpt("hear-bark")
    cpt_2 = BN.bn.get_cpt("dog-out")
    print('cpt_1:', cpt_1, 'cpt_2:', cpt_2)
    factor_product = BN.multiply_cpts(cpt_1, cpt_2)
    print('factor_product:', factor_product)
    '''

    # test d-separation
    '''
    reasoner = BNReasoner('testing/dog_problem.BIFXML')
    BN = BayesNet()
    network = BN.load_from_bifxml('testing/dog_problem.BIFXML')
    BN.draw_structure()
    test = reasoner.d_separation(
        network, 'family-out', 'hear-bark', ['dog-out'])
    print(test)

    # test = reasoner.d_separation(network, 'dog-out', 'light-on', ['dog-out'])
    # print(test)
    '''

    # test MPE
    """
    bn = BayesNet()
    bn.load_from_bifxml('testing/lecture_example.BIFXML')
    bnr = BNReasoner(bn)
    bnr.MPE([('Winter?', True), ('Wet Grass?', True)], bnr.random_ordening)
    """
